---
apiVersion: serverless.kyma-project.io/v1alpha2
kind: Function
metadata:
    creationTimestamp: null
    labels:
        app.kubernetes.io/name: hana-fn
    name: hana-fn
    namespace: default
spec:
    runtime: nodejs18
    source:
        inline:
            dependencies: |
                {
                  "name": "hana-fn",
                  "version": "0.0.1",
                  "dependencies": {
                    "@sap/hana-client": "^2.19.21",
                    "@sap/xsenv": "^4.2.0",
                    "uuid": "^9.0.1"
                  }
                }
            source: "const xsenv = require('@sap/xsenv');\nconst hana = require('@sap/hana-client');\n\nconst { v4: uuidv4 } = require('uuid');\n\nvar services = xsenv.getServices({\n   hana: { name: 'hana' },\n   hanaUrl: { name: 'hana-url' },\n });\n\nservices.hana.schema = process.env.HANA_SCHEMA;\nservices.hana.host = services.hanaUrl.host;\nservices.hana.port = services.hanaUrl.port;\n\nconst hanaConn = hana.createConnection();\n\nvar tracer = undefined;\n\nasync function queryDB(sql) {\n  const span = tracer.startSpan('query-hana');\n  span.setAttribute(\"sql\", sql);\n  try {\n    await hanaConn.connect(services.hana);\n    await hanaConn.exec('SET SCHEMA ' + services.hana.schema);\n    results = await hanaConn.exec(sql);\n  } catch (err) {\n    console.error('queryDB ', err.message, err.stack);\n    results = err.message;\n  }\n  finally {\n    await hanaConn.disconnect()\n    span.end();\n  }\n  return results;\n}\nclass Cache {\n  constructor() {\n    this.data = undefined;\n  }\n\n  async getData() {\n      if (!this.data){\n          try {\n            this.data = await queryDB(`SELECT * FROM BOOKS`) \n          } catch (e) {\n            console.log(e)\n          }\n      }\n      return this.data\n  }\n\n  invalidate() {\n      this.data=undefined\n  }\n}\n\nconst cache = new Cache();\n\nmodule.exports = {\n    main: async function (event, context) {\n        tracer = event.tracer;\n        if (event.extensions.request.method === 'GET') {\n            const books = await cache.getData();\n            return books\n        } else if(event.extensions.request.method === 'POST'){\n            let query = `insert into BOOKS values ('${uuidv4()}', '${event.extensions.request.body.title}', '${event.extensions.request.body.author}')`\n            try {\n                let result =  await queryDB(query)\n                cache.invalidate();\n                return `${result} book added`\n            } catch (err) {\n                return err.message;\n            }\n        }\n    }\n}"

    env:
    - name: SERVICE_BINDING_ROOT
      value: /bindings
    - name: HANA_SCHEMA
      value: DKOM
    secretMounts:
      - secretName: hana
        mountPath: "/bindings/hana"
      - secretName: hana-url
        mountPath: "/bindings/hana-url"