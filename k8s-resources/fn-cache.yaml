---
apiVersion: serverless.kyma-project.io/v1alpha2
kind: Function
metadata:
    creationTimestamp: null
    labels:
        app.kubernetes.io/name: cache-fn
    name: cache-fn
    namespace: default
spec:
    env:
        - name: DATA_SRC_URL
          value: http://hana-fn.default.svc.cluster.local:80
    runtime: nodejs18
    source:
        inline:
            dependencies: |
                {
                  "name": "cache-fn",
                  "version": "0.0.1",
                  "dependencies": {
                    "axios": "^1.6.7"
                  }
                }
            source: "const axios = require('axios');\nconst dataSrcURL = process.env.DATA_SRC_URL;\n\nclass Cache {\n    constructor() {\n      this.data = undefined;\n    }\n    // Method\n    async getData() {\n        if (!this.data){\n            this.data = await this.fetchData() \n        }\n        return this.data\n    }\n    async fetchData() {\n      try{\n        var resp = await axios.get(dataSrcURL)\n        return resp.data\n      } catch (err) {\n        return err\n      }\n    }\n\n    invalidate() {\n        this.data=undefined\n    }\n}\n  \nconst cache = new Cache();\n\n\nmodule.exports = {\n    main: async function (event, context) {\n        if (event.extensions.request.method === 'GET') {\n            return await cache.getData()\n        } else if(event.extensions.request.method === 'POST'){\n            if(event.extensions.request.body.title && event.extensions.request.body.author){\n                try{\n                    var resp = await axios.post(dataSrcURL, event.data)\n                    cache.invalidate();\n                    return resp.data\n                  } catch (err) {\n                    return err\n                  }\n            }\n            res = event.extensions.response;\n            \n            res.statusMessage=\"'author' & 'title' required in the payload\"\n            res.status(400)\n            return\n        }\n    }\n}\n\n"

